Recursive descent parse:
EP -> LOGIC | MATH | str
MATH -> TD MATH'
MATH' -> op1 TD MATH' | ɛ
TD -> TERM TD'
TD' -> op2 TERM TD' | ɛ
TERM -> ( MATH ) | id | intc | real
(op1 = +, -) (op2 = *, /)

LOGIC -> B LOGIC'
LOGIC' -> or B LOGIC' | ɛ
B -> C B'
B' -> and C B' | ɛ
C -> not C | D
D -> ( A ) | E
E -> MATH_EP > MATH_EP | MATH_EP < MATH_EP | MATH_EP



LL(1) parse:
DECLA → TYPE VAR_LIST ;
VAR_LIST → VAR VAR_LIST'
VAR_LIST' → , VAR VAR_LIST' | ɛ
VAR → id VAR'
VAR' → INITIAL | [ intc ]
INITIAL → = EP | ɛ


Non-Terminal | id           | ,              | ;      | =       | [          | intc  | TYPE            | $
-----------------------------------------------------------------------------------------------------------------
DECLA        |              |                |        |         |            |       | TYPE VAR_LIST ; | 
VAR_LIST     | VAR VAR_LIST'|                |        |         |            |       |                 |
VAR_LIST'    |              | , VAR VAR_LIST'| ε      |         |            |       |                 |
VAR          | id VAR'      |                |        |         |            |       |                 |
VAR'         |              | INITIAL        | INITIAL| INITIAL | [ intc ]   |       |                 |
INITIAL      |              | ε              | ε      | = EP    |            |       |                 |


#TODO
START -> EX_DECLA | START EX_DECLA
EX_DECLA -> FUNC_DEF | DECLA
FUNC_DEF -> TYPE id ( ) { BLOCK_ST }
(Param list)

S -> . BLOCK_ST
BLOCK_ST -> . STATM
BLOCK_ST -> . BLOCK_ST STATM
STATM -> . ASS_ST
STATM -> . WHILE_ST
STATM -> . RETURN_ST
STATM -> . IF_ST
STATM -> . FOR_ST
STATM -> . DECLA
RETURN_ST -> . return EP ;
WHILE_ST -> . while ( LOGIC_EP ) { BLOCK_ST }
ASS_ST -> . id = EP ;


STATM -> IF_ST | FOR_ST | DECLA
IF_ST -> if ( LOGIC_EP ) { BLOCK_ST } ELSE_ST
ELSE_ST -> else { BLOCK_ST } | ɛ 
FOR_ST -> for ( VAR ; LOGIC_EP ; ASS_ST ) { BLOCK_ST }



Check again the operand, a lot of operand is missing.